# 40.数组中只出现一次的数字
## 题目
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
## 思路
这道题有个特点就是说，除了两个数字之外，其余数字都出现了两次。用O(n)的时间复杂度，O(1)的空间复杂度解这道题，最关键的便是这个特点，有个位运算操作叫做<b>异或</b>，两个相同的数字异或得到的结果是0。用这个特性，如果整个数组中只有一个与众不同的数字，依此异或的结果就是这个与众不同的数字了。

但是本题有两个与众不同的数字，这可如何是好？一个机智的想法是将其拆分成两个数组，每个数组中各有一个与众不同数，该如何拆分呢？试想：所有数字异或 与 这两个与众不同数a,b异或 结果是一样的，两个不同数异或一定不是0，那么在2进制角度看，一定有一位是1，也就是说其中一个数该位置是1，另一个数该位置是0，可以根据这个特征将所有的数拆分为两个数组，分别累计异或，就得到了两个与众不同数。

```C++
class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {
		    int temp = 0;
        int len = data.size();
        for(int i = 0; i < len; ++i)
            temp = temp ^ data[i];
        unsigned int base = 1;
        while((temp & base) == 0){
            base = base << 1;
        }
        int l = 0, r = len - 1;
        while(l < r){
            while((data[l] & base) == 0)
                l++;
            while((data[r] & base) == 1)
                r--;
            if(l < r){
                int t = data[l];
                data[l] = data[r];
                data[r] = t;
                l++;
                r--;
            }
        }
        if(l == r)
            (data[l] & base) ? --r : ++l;
        
        *num1 = 0;
        for(int i = 0; i <= r; ++i)
            *num1 ^= data[i];
        *num2 = 0;
        for(int i = l; i < len; ++i)
            *num2 ^= data[i];
        return;
    }
};
```
